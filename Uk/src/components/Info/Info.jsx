import './Info.css';
import { useState } from 'react';

function Info() {
  const [trip, setTrip] = useState({
    from: '',
    to: '',
    date: '',
    seats: '',
    coachType: ''
  });

  const [passengers, setPassengers] = useState([
    { lastName: '', firstName: '', birthDate: '', document: '' },
    { lastName: '', firstName: '', birthDate: '', document: '' }
  ]);

  const handleTripChange = (e) => {
    const { name, value } = e.target;
    setTrip((prev) => ({ ...prev, [name]: name === 'seats' ? Number(value) : value }));

    if (name === 'seats') {
      const newCount = Number(value);
      setPassengers((prev) => {
        const copy = [...prev];
        if (newCount > copy.length) {
          while (copy.length < newCount) {
            copy.push({ lastName: '', firstName: '', birthDate: '', document: '' });
          }
        } else {
          copy.length = newCount;
        }
        return copy;
      });
    }
  };

  const handlePassengerChange = (index, e) => {
    const { name, value } = e.target;
    setPassengers((prev) => {
      const updated = [...prev];
      updated[index][name] = value;
      return updated;
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      trip,
      passengers
    };

    try {
      const response = await fetch('http://localhost:3001/save-passengers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        alert('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É passengers.json!');
      } else {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
      }
    } catch (err) {
      console.error(err);
      alert('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î');
    }
  };

  const handleRun = async () => {
    const data = { trip, passengers };

    try {
      const response = await fetch("http://localhost:3001/run-uz", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const result = await response.json();
      if (response.ok) {
        alert("üöÇ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ!\n" + result.message);
      } else {
        alert("‚ùå –ü–æ–º–∏–ª–∫–∞: " + result.error);
      }
    } catch (err) {
      console.error(err);
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î");
    }
  };

  return (
    <div className="info-form">
      <h2>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—ó–∑–¥–∫—É</h2>
      <form onSubmit={handleSubmit}>
        <label>
          –ó–≤—ñ–¥–∫–∏:
          <input type="text" name="from" value={trip.from} onChange={handleTripChange} />
        </label>
        <label>
          –ö—É–¥–∏:
          <input type="text" name="to" value={trip.to} onChange={handleTripChange} />
        </label>
        <label>
          –î–∞—Ç–∞:
          <input type="date" name="date" value={trip.date} onChange={handleTripChange} />
        </label>
        <label>
          –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:
          <input type="number" name="seats" min="1" max="10" value={trip.seats} onChange={handleTripChange} />
        </label>
        <label>
          –¢–∏–ø –≤–∞–≥–æ–Ω–∞:
          <select name="coachType" value={trip.coachType} onChange={handleTripChange}>
            <option value="">-- –≤–∏–±–µ—Ä—ñ—Ç—å --</option>
            <option value="–ü–ª–∞—Ü–∫–∞—Ä—Ç">–ü–ª–∞—Ü–∫–∞—Ä—Ç</option>
            <option value="–ö—É–ø–µ">–ö—É–ø–µ</option>
            <option value="–°–í">–°–í</option>
          </select>
        </label>

        <h3>–ü–∞—Å–∞–∂–∏—Ä–∏</h3>
        {passengers.map((p, index) => (
          <div key={index} className="passenger">
            <label>
              –ü—Ä—ñ–∑–≤–∏—â–µ:
              <input
                type="text"
                name="lastName"
                value={p.lastName}
                onChange={(e) => handlePassengerChange(index, e)}
              />
            </label>
            <label>
              –Ü–º'—è:
              <input
                type="text"
                name="firstName"
                value={p.firstName}
                onChange={(e) => handlePassengerChange(index, e)}
              />
            </label>
            <label>
              –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:
              <input
                type="date"
                name="birthDate"
                value={p.birthDate}
                onChange={(e) => handlePassengerChange(index, e)}
              />
            </label>
            <label>
              –î–æ–∫—É–º–µ–Ω—Ç:
              <input
                type="text"
                name="document"
                value={p.document}
                onChange={(e) => handlePassengerChange(index, e)}
              />
            </label>
          </div>
        ))}

        <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
        <button type="button" onClick={handleRun}>–ó–∞–ø—É—Å—Ç–∏—Ç–∏</button>
      </form>
    </div>
  );
}

export default Info;
