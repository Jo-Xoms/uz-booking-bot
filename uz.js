import { chromium } from "playwright";
import fs from "fs";

const passengers = JSON.parse(fs.readFileSync("./passengers.json", "utf-8"));
const config = JSON.parse(fs.readFileSync("./config.json", "utf-8"));

function log(step) {
  console.log(`üü¶ ${step}`);
}

async function firstVisibleLocator(page, candidates) {
  for (const c of candidates) {
    const loc = typeof c === "function" ? c(page) : page.locator(c);
    const count = await loc.count();
    for (let i = 0; i < count; i++) {
      const el = loc.nth(i);
      if (await el.isVisible().catch(() => false)) return el;
    }
  }
  return null;
}

async function selectCity(page, placeholder, cityName) {
  const input = page.locator(`input[placeholder='${placeholder}']`);
  await input.click();
  await input.fill(cityName);
  await page.waitForSelector("[role='option']");
  await page.locator("[role='option']").first().click();
}

async function waitForTrains(page) {
  log("–ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤‚Ä¶");
  const deadline = Date.now() + 120_000;
  while (Date.now() < deadline) {
    const trains = await page.locator("section.TripUnitInfo").elementHandles();
    if (trains.length > 0) return trains;
    await page.waitForTimeout(500);
  }
  throw new Error("–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤ (–ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞).");
}

async function chooseTrainWithMostSeats(page) {
  log("–í—ã–±–∏—Ä–∞–µ–º –ø–æ–µ–∑–¥/–≤–∞–≥–æ–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç‚Ä¶");

  await waitForTrains(page);

  const wagons = await page.locator(".TripUnitWagon[role='button']").elementHandles();
  if (wagons.length === 0) {
    throw new Error("–ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∞–≥–æ–Ω–∞.");
  }

  let maxSeats = 0;
  let bestWagon = null;

  for (const wagon of wagons) {
    try {
      const text = await wagon.$eval(".Typography--caption", el => el.textContent);
      const seats = parseInt(text?.match(/\d+/)?.[0] ?? "0", 10);
      if (seats > maxSeats) {
        maxSeats = seats;
        bestWagon = wagon;
      }
    } catch {
      continue;
    }
  }

  if (!bestWagon) {
    throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–≥–æ–Ω–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.");
  }

  await bestWagon.click();
  log(`–ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –≤–∞–≥–æ–Ω—É —Å ${maxSeats} –º–µ—Å—Ç–∞–º–∏.`);
}

async function pickSeats(page, seatsToBook) {
  log("–ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞‚Ä¶");

  await page.waitForSelector("button.WagonUnitBed", { timeout: 15000 });
  await page.waitForTimeout(500);

  const freeSeats = page.locator("button.WagonUnitBed:not([disabled])");
  const count = await freeSeats.count();

  if (count === 0) {
    throw new Error("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
  }

  let clicked = 0;
  for (let i = 0; i < count && clicked < seatsToBook; i++) {
    const btn = freeSeats.nth(i);
    const seatNumber = await btn.locator(".Typography--captionBold").innerText().catch(() => "?");

    try {
      await btn.click({ trial: true });
      await btn.click();
      log(`‚úÖ –í—ã–±—Ä–∞–ª–∏ –º–µ—Å—Ç–æ ‚Ññ${seatNumber}`);
      clicked++;
    } catch (e) {
      log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –º–µ—Å—Ç—É ‚Ññ${seatNumber}: ${e.message}`);
    }
  }

  if (clicked === 0) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.");
  }

  const goToPassengers = await firstVisibleLocator(page, [
    "a:has-text('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤')",
    "a:has-text('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º')",
    "a:has-text('Go to passengers')"
  ]);

  if (!goToPassengers) {
    throw new Error("–ù–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤¬ª.");
  }

  await page.waitForTimeout(1000);
  await goToPassengers.click();
  log("–ü–µ—Ä–µ—à–ª–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.");
}

async function fillPassengers(page, seatsToBook) {
  log("–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤‚Ä¶");

  for (let i = 0; i < seatsToBook; i++) {
    const p = passengers[i];
    if (!p) break;

    const fn = page.locator("input[name='first_name'], #first_name");
    const ln = page.locator("input[name='last_name'], #last_name");
    const bd = page.locator("input[name='bdate'], #bdate");
    const dn = page.locator("input[name='docnum'], #docnum");

    await fn.waitFor({ state: "visible", timeout: 10000 });

    if (await fn.count()) await fn.fill(p.firstName);
    if (await ln.count()) await ln.fill(p.lastName);
    if (await bd.count()) await bd.fill(p.birthDate);
    if (await dn.count()) await dn.fill(p.document);

    log(`üë§ –ü–∞—Å—Å–∞–∂–∏—Ä ${i + 1}: ${p.firstName} ${p.lastName} –∑–∞–ø–æ–ª–Ω–µ–Ω`);

    if (i < seatsToBook - 1) {
      const nextBtn = page.locator(`#submitPassenger-${i}`);
      if (await nextBtn.isVisible().catch(() => false)) {
        await nextBtn.click();
        log("‚û°Ô∏è –ù–∞–∂–∞–ª–∏ ¬´–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Å–∞–∂–∏—Ä¬ª");
        await page.waitForTimeout(1000);
      } else {
        log("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Å–∞–∂–∏—Ä¬ª");
      }
    }
  }

  log("‚úÖ –í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.");
}

(async () => {
  const browser = await chromium.launch({ headless: false, slowMo: 120 });
  const page = await browser.newPage();

  await page.goto("https://booking.uz.gov.ua/", { waitUntil: "domcontentloaded" });

  log("–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞‚Ä¶");
  await selectCity(page, "–ó–≤—ñ–¥–∫–∏", config.from);
  await selectCity(page, "–ö—É–¥–∏", config.to);

  log("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é‚Ä¶");
  await page.waitForFunction(() => document.querySelector("#startDate")?.value !== "");

  const searchBtn = await firstVisibleLocator(page, [
    (p) => p.getByRole("button", { name: /–ó–Ω–∞–π—Ç–∏|search/i }),
    "button:has-text('–ü–æ—à—É–∫')",
    "button:has-text('Search')"
  ]);
  if (searchBtn) await searchBtn.click();
  else throw new Error("–ù–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–æ—à—É–∫¬ª.");

  await chooseTrainWithMostSeats(page);

  const seatsToBook = Number(config.seats ?? 1);
  await pickSeats(page, seatsToBook);

  await fillPassengers(page, seatsToBook);

  console.log("‚úÖ –ì–æ—Ç–æ–≤–æ. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ–ø–ª–∞—Ç–µ –≤—Ä—É—á–Ω—É—é.");
})().catch((e) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", e.message);
});
